1. This is the stack at each step;

STEP 1:
8,
STEP 2:
8, 2,
STEP 3:
pop() = 2
8,
STEP 4:
16,
STEP 5:
16, 10,
STEP 6:
16, 5,


2. This is the Queue at each step
STEP 1:
4
Step 2:
8
Step 3:
8, 8
Step 4:
4, 8
Step 5:
pop() = 8
Step 6:
pop() = 4



3. To search a Deque in O(n/2) time we want to search from both ends at a time:

public int findIndex(Object T, Deque deque){
        for(int i = 0; i < deque.size(); i++){
            if(deque.pollFirst() == T){
                return i;
            }
            if(deque.pollLast() == T){
                return deque.size() - i;
            }
        }
        return -1;
    }

This is code to do that.

7. Algorithm Analysis:

Balanced Bracket is O(n) time where n is the length of the String given as an input.
I know it is O(n) time because we traverse the whole String one time.
Balanced bracket has O(n), n = length of string, space complexity because in the worst case we push all n elements to the stack.


Decode String is O(n) time where n is the length of the String given as input.
I know it is O(n) time because we traverse the whole encoded String one time, and everything else is atomics.
Decode String has O(n), n = length of string, space complexity because we store up to n elements in our stack.
Technically it is more like O(2n) space complexity because we create the variable temp n times, but we chop off the constant


InfixPostfix is O(n) time where n is the length of the String given as input.
I know it is O(n) time because we traverse the whole expression one time only.
InfixPostfix is O(n) n = length of string, although we will never store all n elements in our stack O(n) is our upper limit.


